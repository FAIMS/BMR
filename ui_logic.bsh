startInternalGPS();

User user;
String userid;
String feature_id = null;
String feature_type = null;
String delete_id = null;

brianMagic(){
    fetchOne("drop view if exists identifierAsSpreadsheet;");
    fetchOne("create view identifierAsSpreadsheet as select uuid, group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), '-') as response " +
    "from (select * from latestNonDeletedArchentIdentifiers order by  attributename) group by uuid;");
}

brianMagic();


onEvent("control", "show", "populateControl(); feature_id = null;");
onEvent("control/New_Data/newBucket", "click", "newBucket()");
onEvent("control/New_Data/newTower", "click", "newTower()");
onEvent("control/New_Data/newTensionStation", "click", "newTensionStation()");
onEvent("control/New_Data/newTrackRope", "click", "newTrackRope()");
onEvent("control/New_Data/newHaulRope", "click", "newHaulRope()");
onEvent("control/New_Data/newRopeJoiner", "click", "newRopeJoiner()");
onEvent("control/New_Data/newRopeGroove", "click", "newRopeGroove()");
onEvent("control/New_Data/Other", "click", "newOther()");

onEvent("control/Search", "show", "search()");
onEvent("control/Search/searchButton", "click", "search()");
onEvent("control/Search/searchAllButton", "click", "searchAll()");
onEvent("control/Search/Search_Results", "click", "specialLoad()");

onEvent("control/gps/connectinternal", "click", "startInternalGPS()");
onEvent("control/gps/connectexternal", "click", "startExternalGPS()");

searchAll(){
    setFieldValue("control/Search/Search_Bar", "");
    setFieldValue("control/Search/Dropdown", "");
    search();
}


getCounterWithParent(table, parent){
    counter = fetchOne("select group_concat(freetext,' ') as outfoo from ( "+
"select freetext || ' - ' || '"+table+"' as freetext, 1 as odr  "+
" from latestnondeletedarchentidentifiers  "+
"where uuid = "+parent+" "+
"union "+
"select count(distinct uuid)+1, 2 from ( "+
"select distinct child.uuid as uuid, aenttypename "+
"  from (select '' as dual), latestnondeletedaentreln parent  "+
"  join latestnondeletedaentreln child using (relationshipid)  "+
"  join latestnondeletedarchent ae on (ae.uuid = child.uuid)  "+
"  join latestnondeletedrelationship using (relationshipid)  "+
"  join relntype using (relntypeid) "+
"  join aenttype using (aenttypeid) "+
" where parent.uuid != child.uuid  "+
" and parent.uuid = "+parent+" "+
" and aenttypename = '"+table+"') "+
"order by odr "+
"); ");
     if(isNull(counter)){
        return "Something went wrong";
    } else {
        counterText = counter.get(0);
        check = fetchOne("select freetext from latestnondeletedaentvalue where freetext = '"+counterText+"'");
        if(isNull(check))
            return counterText;
        else
            return "Error: One or more of your identifiers is missing.";
    }


}

getCounter(table){
    counter = fetchOne(" select aenttypename || ' ' || foo from (select count(distinct uuid)+1 as foo, aenttypename from  aenttype left outer join latestnondeletedarchent using (aenttypeid) where aenttypename = '"+table+"');");
    if(isNull(counter)){
        return "Something went wrong";
    } else {
        counterText = counter.get(0);
        check = fetchOne("select freetext from latestnondeletedaentvalue where freetext = '"+counterText+"'");
        if(isNull(check))
            return counterText;
        else
            return "Error: One or more of your identifiers is missing.";
    }
}

search () {
    table = getFieldValue("control/Search/Dropdown");
    searchField = getFieldValue("control/Search/Search_Bar");


    populateList("control/Search/Search_Results", fetchAll(""+
        "SELECT uuid||'='||aenttypename, response   "+
        "FROM identifierAsSpreadsheet join latestnondeletedarchent using (uuid) join aenttype using (aenttypeid) "+
        "WHERE aenttypename LIKE '%'||'"+table+"'  "+
        "and uuid in (select uuid from latestnondeletedaentvalue  "+
        "             left outer join vocabulary using (vocabid) where freetext like '%"+searchField+"%' or vocabname like '%"+searchField+"%' or measure like '%"+searchField+"%')  "+
        "GROUP BY uuid  "+
        "order by case '"+table+"' when '' then aenttimestamp else '' end desc, response; "));

}

populateControl(){
    populateDropDown("control/Search/Dropdown", fetchAll("select '', 'All Entities' union select aenttypename, aenttypename from aenttype;"));
}

specialLoad(){
    String temp = getListItemValue();
    String[] splitString = temp.split("=");
    if(splitString[1].equals("Bucket")){
        loadBucketFrom(splitString[0]);
    } else if(splitString[1].equals("Tower")) {
        loadTowerFrom(splitString[0]);
    } else if(splitString[1].equals("Tower pole")) {
        loadTowerPoleFrom(splitString[0]);
    } else if(splitString[1].equals("Haul rope wheel frame")) {
        loadWheelFrameFrom(splitString[0]);
    } else if(splitString[1].equals("Tower bolts")) {
        loadTowerBoltFrom(splitString[0]);
    } else if(splitString[1].equals("Tension station")) {
        loadTensionStationFrom(splitString[0]);
    } else if(splitString[1].equals("Tension station bolts")) {
        loadTensionStationBoltsFrom(splitString[0]);
    } else if(splitString[1].equals("Track crossbar")) {
        loadTrackCrossbarFrom(splitString[0]);
    } else if(splitString[1].equals("Track rope")) {
        loadTrackRopeFrom(splitString[0]);
    } else if(splitString[1].equals("Rope joiner")) {
        loadRopeJoinerFrom(splitString[0]);
    } else if(splitString[1].equals("Rope groove")) {
        loadRopeGrooveFrom(splitString[0]);
    } else if(splitString[1].equals("Haul rope")) {
        loadHaulRopeFrom(splitString[0]); 
    } else if(splitString[1].equals("Other")) {
        loadOtherFrom(splitString[0]);
    } else if(splitString[1].equals("Photograph log")) {
        loadPhotologFrom(splitString[0]);
    } 
}

/** ARCHENT: Bucket **/
onEvent("Bucket/PhotoLog", "show", "loadBucketRelated()");
onEvent("Bucket/Carriage_Details", "show", "setFieldValue(\"Bucket/Carriage_Details/Bucket_assembly_number\", getFieldValue(\"Bucket/Carrier_Details/Bucket_assembly_number\"))");
onEvent("Bucket/Bucket_Details", "show", "setFieldValue(\"Bucket/Bucket_Details/Bucket_assembly_number\", getFieldValue(\"Bucket/Carrier_Details/Bucket_assembly_number\"))");

onEvent("Bucket/Carrier_Details/Update", "delayclick", "saveBucket(\"\")");
onEvent("Bucket/Carriage_Details/Update", "delayclick", "saveBucket(\"\")");
onEvent("Bucket/Bucket_Details/Update", "delayclick", "saveBucket(\"\")");

onEvent("Bucket/Carrier_Details/Duplicate", "delayclick", "saveBucket(\"bucket_id=null;autoNumBucket();\")");
onEvent("Bucket/Carriage_Details/Duplicate", "delayclick", "saveBucket(\"bucket_id=null;autoNumBucket();\")");
onEvent("Bucket/Bucket_Details/Duplicate", "delayclick", "saveBucket(\"bucket_id=null;autoNumBucket();\")");

onEvent("Bucket/Carrier_Details/New", "delayclick", "saveBucket(\"newBucket();\")");
onEvent("Bucket/Carriage_Details/New", "delayclick", "saveBucket(\"newBucket();\")");
onEvent("Bucket/Bucket_Details/New", "delayclick", "saveBucket(\"newBucket();\")");

onEvent("Bucket/Carrier_Details/Close", "delayclick", "saveBucket(\"cancelTabGroup(\\\"Bucket\\\", false);\")");
onEvent("Bucket/Carriage_Details/Close", "delayclick", "saveBucket(\"cancelTabGroup(\\\"Bucket\\\", false);\")");
onEvent("Bucket/Bucket_Details/Close", "delayclick", "saveBucket(\"cancelTabGroup(\\\"Bucket\\\", false);\")");

onEvent("Bucket/Carrier_Details/Delete", "delayclick", "deleteBucket()");
onEvent("Bucket/Carriage_Details/Delete", "delayclick", "deleteBucket()");
onEvent("Bucket/Bucket_Details/Delete", "delayclick", "deleteBucket()");

onEvent("Bucket/PhotoLog/newPhotoLog", "delayclick", "saveBucket(\"feature_id = bucket_id; feature_type=\\\"Bucket\\\"; newPhotolog();\")");
onEvent("Bucket/PhotoLog/ListPhotoLog", "click", "feature_id = bucket_id; loadPhotolog();");

onEvent("Bucket/Carrier_Details/CalculateGPS", "delayclick", "fillInGPS(\"Bucket/Carrier_Details/Carrier_\")");
onEvent("Bucket/Carriage_Details/CalculateGPS", "delayclick", "fillInGPS(\"Bucket/Carriage_Details/Carriage_\")");
onEvent("Bucket/Bucket_Details/CalculateGPS", "delayclick", "fillInGPS(\"Bucket/Bucket_Details/Bucket_\")");

onEvent("Bucket/Carrier_Details/takePhoto", "delayclick", "attachPictureTo(\"Bucket/Carrier_Details/Carrier_photos\")");
onEvent("Bucket/Carriage_Details/takePhoto", "delayclick", "attachPictureTo(\"Bucket/Carriage_Details/Carriage_photos\")");
onEvent("Bucket/Bucket_Details/takePhoto", "delayclick", "attachPictureTo(\"Bucket/Bucket_Details/Bucket_photos\")");

String bucket_id;

newBucket(){
    bucket_id = null;
    newTabGroup("Bucket");
    autoNumBucket();
    date = fetchOne("select date('now', 'localtime');");
    setFieldValue("Bucket/Carrier_Details/Creation_Date", date.get(0));
    setFieldValue("Bucket/Carrier_Details/Created_By", username);

}

autoNumBucket() {
    setFieldValue("Bucket/Carrier_Details/Bucket_assembly_number", getCounter("Bucket"));
    setFieldValue("Bucket/Carriage_Details/Bucket_assembly_number", getCounter("Bucket"));
    setFieldValue("Bucket/Bucket_Details/Bucket_assembly_number", getCounter("Bucket"));
}

loadBucketFrom(archent_id) {
    bucket_id = archent_id;
    if (isNull(bucket_id)) {
        showToast("No record selected");
        return;
    }
    showTabGroup("Bucket", bucket_id);    
    Object foo = fetchOne("select fname || ' ' || lname from user join archentity using (userid) where uuid = '"+bucket_id+"' group by uuid having min(aenttimestamp)");
    setFieldValue("Bucket/Carrier_Details/Created_By", foo.get(0));
    Object bar = fetchOne("select uuid, datetime(aentTimestamp, 'localtime')  from archentity where uuid = '"+bucket_id+"' group by uuid having min(aenttimestamp);");
    setFieldValue("Bucket/Carrier_Details/Creation_Date", bar.get(1));

}

loadBucketAttributes(){
    populateRadioGroup("Bucket/Carrier_Details/Fitted_with_anti-tip_brackets", makeVocab("Fitted with anti-tip brackets"));
    populateRadioGroup("Bucket/Carrier_Details/Grip_slide_present", makeVocab("Grip slide present"));
    populateRadioGroup("Bucket/Carrier_Details/Bolt_in_grip_slide", makeVocab("Bolt in grip slide"));
    populateRadioGroup("Bucket/Carrier_Details/Grip_slide_smashed", makeVocab("Grip slide smashed"));
    populateRadioGroup("Bucket/Carrier_Details/Grip_present", makeVocab("Grip present"));
    populateRadioGroup("Bucket/Carrier_Details/Idler_wheel_present", makeVocab("Idler wheel present"));
    populateRadioGroup("Bucket/Carrier_Details/Idler_wheel_grease_cap_present", makeVocab("Idler wheel grease cap present"));
    populateRadioGroup("Bucket/Carrier_Details/LH_diagonal", makeVocab("LH diagonal"));
    populateRadioGroup("Bucket/Carrier_Details/LH_carrier_arm", makeVocab("LH carrier arm"));
    populateRadioGroup("Bucket/Carrier_Details/RH_diagonal", makeVocab("RH diagonal"));
    populateRadioGroup("Bucket/Carrier_Details/RH_carrier_arm", makeVocab("RH carrier arm"));
    populateRadioGroup("Bucket/Carriage_Details/Left_track_damage", makeVocab("Left track damage"));
    populateRadioGroup("Bucket/Carriage_Details/Left_track_rope_wheel", makeVocab("Left track rope wheel"));
    populateRadioGroup("Bucket/Carriage_Details/Right_track_damage", makeVocab("Right track damage"));
    populateRadioGroup("Bucket/Carriage_Details/Right_track_rope_wheel", makeVocab("Right track rope wheel"));
    populateRadioGroup("Bucket/Bucket_Details/Hit", makeVocab("Hit"));
}

saveBucket(String callback) {
    if (isNull(getFieldValue("Bucket/Carrier_Details/Bucket_assembly_number"))) {
        showWarning("Validation Error", "Cannot save Bucket without Bucket Assembly Number");
        return;
    }
    if (!isNull(bucket_id)) {
        entity = fetchArchEnt(bucket_id);
    }
    saveTabGroup("Bucket", bucket_id, null, null, "bucket_id = getLastSavedRecordId();" + callback);
}

deleteBucket(){
    if (!isNull(bucket_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Bucket Record!", "reallyDeleteBucket()", "doNotDelete()");
    } else {
        cancelTabGroup("Bucket", true);
    }
}

reallyDeleteBucket() {
    deleteArchEnt(bucket_id);
    cancelTabGroup("Bucket", false);
}

loadBucketRelated() {
    feature_id = bucket_id;
    loadRelatedPhotologs("Bucket/PhotoLog/ListPhotoLog");
}

/** ARCHENT: Tower **/
onEvent("Tower/Tower_pole", "show", "loadTowerPoleRelated();");
onEvent("Tower/Tower_hardware", "show", "loadTowerHardwareRelated();");
onEvent("Tower/Tower_bolts", "show", "loadTowerBoltRelated();");
onEvent("Tower/PhotoLog", "show", "loadTowerPhotologRelated();");

onEvent("Tower/Tower_pole/Update", "delayclick", "saveTower(\"\")");
onEvent("Tower/Tower_hardware/Update", "delayclick", "saveTower(\"\")");

onEvent("Tower/Tower_pole/Duplicate", "delayclick", "saveTower(\"tower_id=null;autoNumTower();\")");
onEvent("Tower/Tower_hardware/Duplicate", "delayclick", "saveTower(\"tower_id=null;autoNumTower();\")");

onEvent("Tower/Tower_pole/New", "delayclick", "saveTower(\"newTower();\")");
onEvent("Tower/Tower_hardware/New", "delayclick", "saveTower(\"newTower();\")");

onEvent("Tower/Tower_pole/Close", "delayclick", "saveTower(\"cancelTabGroup(\\\"Tower\\\", false);\")");
onEvent("Tower/Tower_hardware/Close", "delayclick", "saveTower(\"cancelTabGroup(\\\"Tower\\\", false);\")");

onEvent("Tower/Tower_pole/Delete", "delayclick", "deleteTower()");
onEvent("Tower/Tower_hardware/Delete", "delayclick", "deleteTower()");

onEvent("Tower/Tower_pole/Add_pole", "delayclick", "saveTower(\"newTowerPole();\")");
onEvent("Tower/Tower_hardware/Add_track_crossbar", "delayclick", "saveTower(\"newTrackCrossbar();\")");
onEvent("Tower/Tower_hardware/Add_haul_rope_wheel_frame", "delayclick", "saveTower(\"newWheelFrame();\")");
onEvent("Tower/Tower_bolts/Add_tower_bolt", "delayclick", "saveTower(\"newTowerBolt();\")");
onEvent("Tower/PhotoLog/newPhotoLog", "delayclick", "saveTower(\"feature_id = tower_id; feature_type=\\\"Tower\\\"; newPhotolog();\")");

onEvent("Tower/Tower_pole/Show_pole", "click", "loadTowerPole();");
onEvent("Tower/Tower_hardware/Show_track_crossbar", "click", "loadTrackCrossbar();");
onEvent("Tower/Tower_hardware/Show_haul_rope_wheel_frame", "click", "loadWheelFrame();");
onEvent("Tower/Tower_bolts/List_tower_bolt", "click", "loadTowerBolt();");
onEvent("Tower/PhotoLog/ListPhotoLog", "click", "feature_id = tower_id; loadPhotolog();");

onEvent("Tower/Tower_pole/Delete_pole", "click", "feature_type=\"Tower Pole\";deleteTowerRel(getFieldValue(\"Tower/Tower_pole/List_poles\"));");
onEvent("Tower/Tower_hardware/Delete_track_crossbar", "click", "feature_type=\"Track Crossbar\";deleteTowerRel(getFieldValue(\"Tower/Tower_hardware/List_track_crossbar\"));");
onEvent("Tower/Tower_hardware/Delete_haul_rope_wheel_frame", "click", "feature_type=\"Wheel Frame\";deleteTowerRel(getFieldValue(\"Tower/Tower_hardware/List_haul_rope_wheel_frame\"));");

String tower_id;

newTower(){
    tower_id = null;
    newTabGroup("Tower");
    autoNumTower();
    date = fetchOne("select date('now', 'localtime');");
    setFieldValue("Tower/Tower_pole/Creation_Date", date.get(0));
    setFieldValue("Tower/Tower_pole/Created_By", username);
}

autoNumTower() {
    setFieldValue("Tower/Tower_pole/Tower_number", getCounter("Tower"));
}

loadTowerFrom(archent_id) {
    tower_id = archent_id;
    if (isNull(tower_id)) {
        showToast("No record selected");
        return;
    }
    
    showTabGroup("Tower", tower_id);
    Object foo = fetchOne("select fname || ' ' || lname from user join archentity using (userid) where uuid = '"+tower_id+"' group by uuid having min(aenttimestamp)");
    setFieldValue("Tower/Tower_pole/Created_By", foo.get(0));
    Object bar = fetchOne("select uuid, datetime(aentTimestamp, 'localtime')  from archentity where uuid = '"+tower_id+"' group by uuid having min(aenttimestamp);");
    setFieldValue("Tower/Tower_pole/Creation_Date", bar.get(1));
}

loadTowerAttributes(){
    populateRadioGroup("Tower/Tower_pole/Fourth_stabilising_pole", makeVocab("Fourth stabilising pole"));
    populateRadioGroup("Tower/Tower_hardware/Tower_type", makeVocab("Tower type"));
    populateRadioGroup("Tower/Tower_hardware/Haul_rope_cross_timber", makeVocab("Haul rope cross timber"));    
}

saveTower(String callback) {
    if (isNull(getFieldValue("Tower/Tower_pole/Tower_number"))) {
        showWarning("Validation Error", "Cannot save Tower without Tower Number");
        return;
    }
    if (!isNull(tower_id)) {
        entity = fetchArchEnt(tower_id);
    }
    saveTabGroup("Tower", tower_id, null, null, "tower_id = getLastSavedRecordId();" + callback);
}

deleteTower(){
    if (!isNull(tower_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Tower Record!", "reallyDeleteTower()", "doNotDelete()");
    } else {
        cancelTabGroup("Tower", true);
    }
}

reallyDeleteTower(){
    deleteArchEnt(tower_id);
    cancelTabGroup("Tower", false);
}

deleteTowerRel(String archent_id) {
    if (!isNull(archent_id)) {
        delete_id = archent_id;
        showAlert("Confirm Deletion", "Press OK to Delete this Related Record!", "reallyDeleteTowerRel()", "doNotDelete()");
    } else {
        showToast("No record selected");
    }
}

reallyDeleteTowerRel() {
    deleteArchEnt(delete_id);
    if(feature_type.equals("Tower Pole")) {
        loadTowerPoleRelated();
    } else {
        loadTowerHardwareRelated();
    }
}

loadTowerPoleRelated() {
    Object towerPoles = new ArrayList();
    if (!isNull(tower_id)){
        towerPoles = fetchAll("select uuid, group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' | ') as response, valuetimestamp\n"+
            "  FROM (  SELECT uuid, attributeid, vocabid, attributename, vocabname, measure, freetext, certainty, attributetype, valuetimestamp, aenttypename\n"+
            "            FROM latestNonDeletedArchentIdentifiers\n"+
            "           WHERE aenttypename = 'Tower pole'\n"+
            "             AND uuid in (select uuid\n"+
            "                            FROM latestNonDeletedAentReln\n"+
            "                           where relationshipid in (select relationshipid\n"+
            "                                                      FROM latestNonDeletedAentReln\n"+
            "                                                      JOIN relationship using (relationshipid)\n"+
            "                                                      JOIN relntype using (relntypeid)\n"+
            "                                                     where uuid = "+tower_id+"\n"+
            "                                                       and relntypeName = 'TowerTowerPole')\n"+
            "                             and uuid != "+tower_id+")\n"+
            "        ORDER BY uuid, attributename ASC)\n"+
            "group by uuid\n"+
            "order by valuetimestamp desc, uuid, attributename;");
    }
    populateDropDown("Tower/Tower_pole/List_poles",  towerPoles);
}

loadTowerHardwareRelated() {
    Object trackCrossbars = new ArrayList();
    Object haulRopeWheelFrames = new ArrayList();
    if (!isNull(tower_id)){
        trackCrossbars = fetchAll("select uuid, group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' | ') as response, valuetimestamp\n"+
            "  FROM (  SELECT uuid, attributeid, vocabid, attributename, vocabname, measure, freetext, certainty, attributetype, valuetimestamp, aenttypename\n"+
            "            FROM latestNonDeletedArchentIdentifiers\n"+
            "           WHERE aenttypename = 'Track crossbar'\n"+
            "             AND uuid in (select uuid\n"+
            "                            FROM latestNonDeletedAentReln\n"+
            "                           where relationshipid in (select relationshipid\n"+
            "                                                      FROM latestNonDeletedAentReln\n"+
            "                                                      JOIN relationship using (relationshipid)\n"+
            "                                                      JOIN relntype using (relntypeid)\n"+
            "                                                     where uuid = "+tower_id+"\n"+
            "                                                       and relntypeName = 'TowerCrossbar')\n"+
            "                             and uuid != "+tower_id+")\n"+
            "        ORDER BY uuid, attributename ASC)\n"+
            "group by uuid\n"+
            "order by valuetimestamp desc, uuid, attributename;");
        haulRopeWheelFrames = fetchAll("select uuid, group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' | ') as response, valuetimestamp\n"+
            "  FROM (  SELECT uuid, attributeid, vocabid, attributename, vocabname, measure, freetext, certainty, attributetype, valuetimestamp, aenttypename\n"+
            "            FROM latestNonDeletedArchentIdentifiers\n"+
            "           WHERE aenttypename = 'Haul rope wheel frame'\n"+
            "             AND uuid in (select uuid\n"+
            "                            FROM latestNonDeletedAentReln\n"+
            "                           where relationshipid in (select relationshipid\n"+
            "                                                      FROM latestNonDeletedAentReln\n"+
            "                                                      JOIN relationship using (relationshipid)\n"+
            "                                                      JOIN relntype using (relntypeid)\n"+
            "                                                     where uuid = "+tower_id+"\n"+
            "                                                       and relntypeName = 'TowerHaulRope')\n"+
            "                             and uuid != "+tower_id+")\n"+
            "        ORDER BY uuid, attributename ASC)\n"+
            "group by uuid\n"+
            "order by valuetimestamp desc, uuid, attributename;");
    }
    populateDropDown("Tower/Tower_hardware/List_track_crossbar",  trackCrossbars);
    populateDropDown("Tower/Tower_hardware/List_haul_rope_wheel_frame",  haulRopeWheelFrames);
}

loadTowerBoltRelated() {
    Object towerBolts = new ArrayList();
    if (!isNull(tower_id)){
        towerBolts = fetchAll("select uuid, group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' | ') as response, valuetimestamp\n"+
            "  FROM (  SELECT uuid, attributeid, vocabid, attributename, vocabname, measure, freetext, certainty, attributetype, valuetimestamp, aenttypename\n"+
            "            FROM latestNonDeletedArchentIdentifiers\n"+
            "           WHERE aenttypename = 'Tower bolts'\n"+
            "             AND uuid in (select uuid\n"+
            "                            FROM latestNonDeletedAentReln\n"+
            "                           where relationshipid in (select relationshipid\n"+
            "                                                      FROM latestNonDeletedAentReln\n"+
            "                                                      JOIN relationship using (relationshipid)\n"+
            "                                                      JOIN relntype using (relntypeid)\n"+
            "                                                     where uuid = "+tower_id+"\n"+
            "                                                       and relntypeName = 'TowerTowerBolt')\n"+
            "                             and uuid != "+tower_id+")\n"+
            "        ORDER BY uuid, attributename ASC)\n"+
            "group by uuid\n"+
            "order by valuetimestamp desc, uuid, attributename;");
    }
    populateList("Tower/Tower_bolts/List_tower_bolt",  towerBolts);
}

loadTowerPhotologRelated() {
    feature_id = tower_id;
    loadRelatedPhotologs("Tower/PhotoLog/ListPhotoLog");
}

/** ARCHENT: Tower Pole **/
onEvent("Tower_pole/Details/Update", "delayclick", "saveTowerPole(\"\")");
onEvent("Tower_pole/Details/Duplicate", "delayclick", "saveTowerPole(\"tower_pole_id=null;autoNumTowerPole();\")");
onEvent("Tower_pole/Details/New", "delayclick", "saveTowerPole(\"newTowerPole();\")");
onEvent("Tower_pole/Details/Close", "delayclick", "saveTowerPole(\"cancelTabGroup(\\\"Tower_pole\\\", false);showTab(\\\"Tower/Tower_pole\\\");\")");
onEvent("Tower_pole/Details/Delete", "delayclick", "deleteTowerPole()");

onEvent("Tower_pole/Details/CalculateGPS", "delayclick", "fillInGPS(\"Tower_pole/Details/\")");
onEvent("Tower_pole/Details/Attach_photos", "delayclick", "attachPictureTo(\"Tower_pole/Details/Photos\")");

String tower_pole_id;

newTowerPole(){
    tower_pole_id = null;
    newTabGroup("Tower_pole");
    autoNumTowerPole();
    date = fetchOne("select date('now', 'localtime');");
    setFieldValue("Tower_pole/Details/Creation_Date", date.get(0));
    setFieldValue("Tower_pole/Details/Created_By", username);
}

autoNumTowerPole() {
    setFieldValue("Tower_pole/Details/Pole_number", getCounterWithParent("Tower pole", tower_id));
}

loadTowerPole() {
    archent_id = getFieldValue("Tower/Tower_pole/List_poles");
    loadTowerPoleFrom(archent_id);
}

loadTowerPoleFrom(archent_id) {
    tower_pole_id = archent_id;
    if (isNull(tower_pole_id)) {
        showToast("No record selected");
        return;
    }
    
    showTabGroup("Tower_pole", tower_pole_id);
    Object foo = fetchOne("select fname || ' ' || lname from user join archentity using (userid) where uuid = '"+tower_pole_id+"' group by uuid having min(aenttimestamp)");
    setFieldValue("Tower_pole/Details/Created_By", foo.get(0));
    Object bar = fetchOne("select uuid, datetime(aentTimestamp, 'localtime')  from archentity where uuid = '"+tower_pole_id+"' group by uuid having min(aenttimestamp);");
    setFieldValue("Tower_pole/Details/Creation_Date", bar.get(1));
}

loadTowerPoleAttributes(){
    populateRadioGroup("Tower_pole/Details/Pole_exists", makeVocab("Pole exists"));
    populateDropDown("Tower_pole/Details/Footing", makeVocab("Footing"));
}

saveTowerPole(String callback) {
    if (isNull(getFieldValue("Tower_pole/Details/Pole_number"))) {
        showWarning("Validation Error", "Cannot save Tower Pole without Pole Number");
        return;
    }
    if (!isNull(tower_pole_id)) {
        entity = fetchArchEnt(tower_pole_id);
    }
    saveTabGroup("Tower_pole", tower_pole_id, null, null, "tower_pole_id = getLastSavedRecordId();saveEntitiesToRel(\"TowerTowerPole\", tower_id, tower_pole_id);" + callback);
}

deleteTowerPole(){
    if (!isNull(tower_pole_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Tower Pole Record!", "reallyDeleteTowerPole()", "doNotDelete()");
    } else {
        cancelTabGroup("Tower_pole", true);
    }
}

reallyDeleteTowerPole(){
    deleteArchEnt(tower_pole_id);
    cancelTabGroup("Tower_pole", false);
}

/** ARCHENT: Track Crossbar **/
onEvent("Track_crossbar/Details/Update", "delayclick", "saveTrackCrossbar(\"\")");
onEvent("Track_crossbar/Details/Duplicate", "delayclick", "saveTrackCrossbar(\"track_crossbar_id=null;autoNumTrackCrossbar();\")");
onEvent("Track_crossbar/Details/New", "delayclick", "saveTrackCrossbar(\"newTrackCrossbar();\")");
onEvent("Track_crossbar/Details/Close", "delayclick", "saveTrackCrossbar(\"cancelTabGroup(\\\"Track_crossbar\\\", false);showTab(\\\"Tower/Tower_hardware\\\");\")");
onEvent("Track_crossbar/Details/Delete", "delayclick", "deleteTrackCrossbar()");

onEvent("Track_crossbar/Details/CalculateGPS", "delayclick", "fillInGPS(\"Track_crossbar/Details/\")");
onEvent("Track_crossbar/Details/Attach_photos", "delayclick", "attachPictureTo(\"Track_crossbar/Details/Photos\")");

String track_crossbar_id;

newTrackCrossbar(){
    track_crossbar_id = null;
    newTabGroup("Track_crossbar");
    autoNumTrackCrossbar();
    date = fetchOne("select date('now', 'localtime');");
    setFieldValue("Track_crossbar/Details/Creation_Date", date.get(0));
    setFieldValue("Track_crossbar/Details/Created_By", username);
}

autoNumTrackCrossbar() {
    setFieldValue("Track_crossbar/Details/Crossbar_number", getCounterWithParent("Track crossbar", tower_id));
}

loadTrackCrossbar() {
    archent_id = getFieldValue("Tower/Tower_hardware/List_track_crossbar");
    loadTrackCrossbarFrom(archent_id);
}

loadTrackCrossbarFrom(archent_id) {
    track_crossbar_id = archent_id;
    if (isNull(track_crossbar_id)) {
        showToast("No record selected");
        return;
    }
    showTabGroup("Track_crossbar", track_crossbar_id);
    Object foo = fetchOne("select fname || ' ' || lname from user join archentity using (userid) where uuid = '"+track_crossbar_id+"' group by uuid having min(aenttimestamp)");
    setFieldValue("Track_crossbar/Details/Created_By", foo.get(0));
    Object bar = fetchOne("select uuid, datetime(aentTimestamp, 'localtime')  from archentity where uuid = '"+track_crossbar_id+"' group by uuid having min(aenttimestamp);");
    setFieldValue("Track_crossbar/Details/Creation_Date", bar.get(1));
}

loadTrackCrossbarAttributes(){
    populateRadioGroup("Track_crossbar/Details/Track_rope_wheel_cross_bar", makeVocab("Track rope wheel cross bar"));
    populateRadioGroup("Track_crossbar/Details/Track_rope_cross_timber_present", makeVocab("Track rope cross timber present"));
    populateHierarchicalDropDown("Track_crossbar/Details/Track_rope_saddle_or_wheel", "Track rope saddle or wheel");
    populateRadioGroup("Track_crossbar/Details/Head_plate", makeVocab("Head plate"));
    populateRadioGroup("Track_crossbar/Details/Cross_timber_angle_bracket", makeVocab("Cross timber angle bracket"));
}

saveTrackCrossbar(String callback) {
    if (isNull(getFieldValue("Track_crossbar/Details/Crossbar_number"))) {
        showWarning("Validation Error", "Cannot save Track Crossbar without Crossbar Number");
        return;
    }
    if (!isNull(track_crossbar_id)) {
        entity = fetchArchEnt(track_crossbar_id);
    }
    saveTabGroup("Track_crossbar", track_crossbar_id, null, null, "track_crossbar_id = getLastSavedRecordId();saveEntitiesToRel(\"TowerCrossbar\", tower_id, track_crossbar_id);" + callback);
}


deleteTrackCrossbar(){
    if (!isNull(track_crossbar_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Track Crossbar Record!", "reallyDeleteTrackCrossbar()", "doNotDelete()");
    } else {
        cancelTabGroup("Track_crossbar", true);
    }
}

reallyDeleteTrackCrossbar(){
    deleteArchEnt(track_crossbar_id);
    cancelTabGroup("Track_crossbar", false);
}

/** ARCHENT: Haul rope wheel frame **/
onEvent("Wheel_frame/Details/Update", "delayclick", "saveWheelFrame(\"\")");
onEvent("Wheel_frame/Details/Duplicate", "delayclick", "saveWheelFrame(\"wheel_frame_id=null;autoNumWheelFrame();\")");
onEvent("Wheel_frame/Details/New", "delayclick", "saveWheelFrame(\"newWheelFrame();\")");
onEvent("Wheel_frame/Details/Close", "delayclick", "saveWheelFrame(\"cancelTabGroup(\\\"Wheel_frame\\\", false);showTab(\\\"Tower/Tower_hardware\\\");\")");
onEvent("Wheel_frame/Details/Delete", "delayclick", "deleteWheelFrame()");

onEvent("Wheel_frame/Details/CalculateGPS", "delayclick", "fillInGPS(\"Wheel_frame/Details/\")");
onEvent("Wheel_frame/Details/Attach_photos", "delayclick", "attachPictureTo(\"Wheel_frame/Details/Photos\")");

String wheel_frame_id;

newWheelFrame(){
    wheel_frame_id = null;
    newTabGroup("Wheel_frame");
    autoNumWheelFrame();
    date = fetchOne("select date('now', 'localtime');");
    setFieldValue("Wheel_frame/Details/Creation_Date", date.get(0));
    setFieldValue("Wheel_frame/Details/Created_By", username);
}

autoNumWheelFrame() {
    setFieldValue("Wheel_frame/Details/Frame_number", getCounterWithParent("Haul rope wheel frame", tower_id));
}

loadWheelFrame() {
    archent_id = getFieldValue("Tower/Tower_hardware/List_haul_rope_wheel_frame");
    loadWheelFrameFrom(archent_id);
}

loadWheelFrameFrom(archent_id) {
    wheel_frame_id = archent_id;
    if (isNull(wheel_frame_id)) {
        showToast("No record selected");
        return;
    }
    showTabGroup("Wheel_frame", wheel_frame_id);
    Object foo = fetchOne("select fname || ' ' || lname from user join archentity using (userid) where uuid = '"+wheel_frame_id+"' group by uuid having min(aenttimestamp)");
    setFieldValue("Wheel_frame/Details/Created_By", foo.get(0));
    Object bar = fetchOne("select uuid, datetime(aentTimestamp, 'localtime')  from archentity where uuid = '"+wheel_frame_id+"' group by uuid having min(aenttimestamp);");
    setFieldValue("Wheel_frame/Details/Creation_Date", bar.get(1));
}

loadWheelFrameAttributes(){
    populateDropDown("Wheel_frame/Details/Wheel", makeVocab("Wheel"));
    populateRadioGroup("Wheel_frame/Details/Bearings", makeVocab("Bearings"));
}

saveWheelFrame(String callback) {
    if (isNull(getFieldValue("Wheel_frame/Details/Frame_number"))) {
        showWarning("Validation Error", "Cannot save record without Frame Number");
        return;
    }
    if (!isNull(wheel_frame_id)) {
        entity = fetchArchEnt(wheel_frame_id);
    }
    saveTabGroup("Wheel_frame", wheel_frame_id, null, null, "wheel_frame_id = getLastSavedRecordId();saveEntitiesToRel(\"TowerHaulRope\", tower_id, wheel_frame_id);" + callback);
}


deleteWheelFrame(){
    if (!isNull(wheel_frame_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Wheel Frame Record!", "reallyDeleteWheelFrame()", "doNotDelete()");
    } else {
        cancelTabGroup("Wheel_frame", true);
    }
}

reallyDeleteWheelFrame(){
    deleteArchEnt(wheel_frame_id);
    cancelTabGroup("Wheel_frame", false);
}

/** ARCHENT: Tower Bolt Archent **/
onEvent("Tower_bolts/Details/Update", "delayclick", "saveTowerBolt(\"\")");
onEvent("Tower_bolts/Details/Duplicate", "delayclick", "saveTowerBolt(\"tower_bolt_id = null;\")");
onEvent("Tower_bolts/Details/New", "delayclick", "saveTowerBolt(\"newTowerBolt();\")");
onEvent("Tower_bolts/Details/Close", "delayclick", "saveTowerBolt(\"cancelTabGroup(\\\"Tower_bolts\\\", false);showTab(\\\"Tower/Tower_bolts\\\");\")");
onEvent("Tower_bolts/Details/Delete", "delayclick", "deleteTowerBolt()");

onEvent("Tower_bolts/Details/CalculateGPS", "delayclick", "fillInGPS(\"Tower_bolts/Details/\")");
onEvent("Tower_bolts/Details/Attach_photos", "delayclick", "attachPictureTo(\"Tower_bolts/Details/Photos\")");

String tower_bolt_id;

newTowerBolt(){
    tower_bolt_id = null;
    newTabGroup("Tower_bolts");
    date = fetchOne("select date('now', 'localtime');");
    setFieldValue("Tower_bolts/Details/Creation_Date", date.get(0));
    setFieldValue("Tower_bolts/Details/Created_By", username);
}

loadTowerBolt() {
    archent_id = getListItemValue();
    loadTowerBoltFrom(archent_id);
}

loadTowerBoltFrom(archent_id) {
    tower_bolt_id = archent_id;
    if (isNull(tower_bolt_id)) {
        showToast("No record selected");
        return;
    }
    
    showTabGroup("Tower_bolts", tower_bolt_id);
    Object foo = fetchOne("select fname || ' ' || lname from user join archentity using (userid) where uuid = '"+tower_bolt_id+"' group by uuid having min(aenttimestamp)");
    setFieldValue("Tower_bolts/Details/Created_By", foo.get(0));
    Object bar = fetchOne("select uuid, datetime(aentTimestamp, 'localtime')  from archentity where uuid = '"+tower_bolt_id+"' group by uuid having min(aenttimestamp);");
    setFieldValue("Tower_bolts/Details/Creation_Date", bar.get(1));
}


loadTowerBoltAttributes(){
    populateRadioGroup("Tower_bolts/Details/Type", makeVocab("Tower bolt type"));
    populateRadioGroup("Tower_bolts/Details/Head", makeVocab("Head"));
    populateRadioGroup("Tower_bolts/Details/In_situ", makeVocab("In situ"));
    populateDropDown("Tower_bolts/Details/Function", makeVocab("Function"));
    populateRadioGroup("Tower_bolts/Details/Nut", makeVocab("Nut"));
    populateRadioGroup("Tower_bolts/Details/Washer", makeVocab("Washer"));
}

saveTowerBolt(String callback) {
    if (isNull(getFieldValue("Tower_bolts/Details/Length")) || isNull(getFieldValue("Tower_bolts/Details/Diameter"))) {
        showWarning("Validation Error", "Cannot save Tower Bolt without Length or Diameter");
        return;
    }
    if (!isNull(tower_bolt_id)) {
        entity = fetchArchEnt(tower_bolt_id);
    }
    saveTabGroup("Tower_bolts", tower_bolt_id, null, null, "tower_bolt_id = getLastSavedRecordId();saveEntitiesToRel(\"TowerTowerBolt\", tower_id, tower_bolt_id);" + callback);
}

deleteTowerBolt(){
    if (!isNull(tower_bolt_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Tower Bolt Record!", "reallyDeleteTowerBolt()", "doNotDelete()");
    } else {
        cancelTabGroup("Tower_bolts", true);
    }
}

reallyDeleteTowerBolt(){
    deleteArchEnt(tower_bolt_id);
    cancelTabGroup("Tower_bolts", false);
}

/** ARCHENT: Tension Station **/
onEvent("Tension_station/Tension_bolts", "show", "loadTensionStationBoltRelated()");
onEvent("Tension_station/PhotoLog", "show", "loadTensionStationPhotoLogRelated()");

onEvent("Tension_station/Details/Update", "delayclick", "saveTensionStation(\"\")");
onEvent("Tension_station/Chain_rollers/Update", "delayclick", "saveTensionStation(\"\")");
onEvent("Tension_station/Cradle/Update", "delayclick", "saveTensionStation(\"\")");
onEvent("Tension_station/Notes/Update", "delayclick", "saveTensionStation(\"\")");

onEvent("Tension_station/Details/Duplicate", "delayclick", "saveTensionStation(\"tension_station_id=null;\")");
onEvent("Tension_station/Chain_rollers/Duplicate", "delayclick", "saveTensionStation(\"tension_station_id=null;\")");
onEvent("Tension_station/Cradle/Duplicate", "delayclick", "saveTensionStation(\"tension_station_id=null;\")");
onEvent("Tension_station/Notes/Duplicate", "delayclick", "saveTensionStation(\"tension_station_id=null;\")");

onEvent("Tension_station/Details/New", "delayclick", "saveTensionStation(\"newTensionStation();\")");
onEvent("Tension_station/Chain_rollers/New", "delayclick", "saveTensionStation(\"newTensionStation();\")");
onEvent("Tension_station/Cradle/New", "delayclick", "saveTensionStation(\"newTensionStation();\")");
onEvent("Tension_station/Notes/New", "delayclick", "saveTensionStation(\"newTensionStation();\")");

onEvent("Tension_station/Details/Close", "delayclick", "saveTensionStation(\"cancelTabGroup(\\\"Tension_station\\\", false);\")");
onEvent("Tension_station/Chain_rollers/Close", "delayclick", "saveTensionStation(\"cancelTabGroup(\\\"Tension_station\\\", false);\")");
onEvent("Tension_station/Cradle/Close", "delayclick", "saveTensionStation(\"cancelTabGroup(\\\"Tension_station\\\", false);\")");
onEvent("Tension_station/Notes/Close", "delayclick", "saveTensionStation(\"cancelTabGroup(\\\"Tension_station\\\", false);\")");

onEvent("Tension_station/Details/Delete", "delayclick", "deleteTensionStation()");
onEvent("Tension_station/Chain_rollers/Delete", "delayclick", "deleteTensionStation()");
onEvent("Tension_station/Cradle/Delete", "delayclick", "deleteTensionStation()");
onEvent("Tension_station/Notes/Delete", "delayclick", "deleteTensionStation()");

onEvent("Tension_station/Cradle/Cradle_1_get_lat_long", "delayclick", "fillInGPS(\"Tension_station/Cradle/Cradle_1_\")");
onEvent("Tension_station/Cradle/Cradle_1_attach_photos", "delayclick", "attachPictureTo(\"Tension_station/Cradle/Cradle_1_photos\")");
onEvent("Tension_station/Cradle/Cradle_2_get_lat_long", "delayclick", "fillInGPS(\"Tension_station/Cradle/Cradle_2_\")");
onEvent("Tension_station/Cradle/Cradle_2_attach_photos", "delayclick", "attachPictureTo(\"Tension_station/Cradle/Cradle_2_photos\")");
onEvent("Tension_station/Cradle/Cradle_3_get_lat_long", "delayclick", "fillInGPS(\"Tension_station/Cradle/Cradle_3_\")");
onEvent("Tension_station/Cradle/Cradle_3_attach_photos", "delayclick", "attachPictureTo(\"Tension_station/Cradle/Cradle_3_photos\")");
onEvent("Tension_station/Cradle/Cradle_4_get_lat_long", "delayclick", "fillInGPS(\"Tension_station/Cradle/Cradle_4_\")");
onEvent("Tension_station/Cradle/Cradle_4_attach_photos", "delayclick", "attachPictureTo(\"Tension_station/Cradle/Cradle_4_photos\")");

onEvent("Tension_station/Notes/Corner_point_1_lat_long", "delayclick", "fillInGPS(\"Tension_station/Notes/Corner_point_1_\")");
onEvent("Tension_station/Notes/Corner_point_2_lat_long", "delayclick", "fillInGPS(\"Tension_station/Notes/Corner_point_2_\")");
onEvent("Tension_station/Notes/Corner_point_3_lat_long", "delayclick", "fillInGPS(\"Tension_station/Notes/Corner_point_3_\")");
onEvent("Tension_station/Notes/Corner_point_4_lat_long", "delayclick", "fillInGPS(\"Tension_station/Notes/Corner_point_4_\")");
onEvent("Tension_station/Notes/Attach_photos", "delayclick", "attachPictureTo(\"Tension_station/Notes/Photos\")");

onEvent("Tension_station/Tension_bolts/Add_tension_bolt", "delayclick", "saveTensionStation(\"newTensionStationBolt();\")");
onEvent("Tension_station/Tension_bolts/List_tension_bolt", "click", "loadTensionStationBolt();");

onEvent("Tension_station/PhotoLog/newPhotoLog", "delayclick", "saveTensionStation(\"feature_id = tension_station_id; feature_type=\\\"Tension_station\\\"; newPhotolog();\")");
onEvent("Tension_station/PhotoLog/ListPhotoLog", "click", "feature_id = tension_station_id; loadPhotolog();");

String tension_station_id;

newTensionStation(){
    tension_station_id = null;
    newTabGroup("Tension_station");
    date = fetchOne("select date('now', 'localtime');");
    setFieldValue("Tension_station/Details/Creation_Date", date.get(0));
    setFieldValue("Tension_station/Details/Created_By", username);
}

loadTensionStationBolt() {
    archent_id = getListItemValue();
    loadTensionStationFrom(archent_id);
}

loadTensionStationFrom(archent_id) {
    tension_station_id = archent_id;
    if (isNull(tension_station_id)) {
        showToast("No record selected");
        return;
    }
    
    showTabGroup("Tension_station", tension_station_id);
    Object foo = fetchOne("select fname || ' ' || lname from user join archentity using (userid) where uuid = '"+tension_station_id+"' group by uuid having min(aenttimestamp)");
    setFieldValue("Tension_station/Details/Created_By", foo.get(0));
    Object bar = fetchOne("select uuid, datetime(aentTimestamp, 'localtime')  from archentity where uuid = '"+tension_station_id+"' group by uuid having min(aenttimestamp);");
    setFieldValue("Tension_station/Details/Creation_Date", bar.get(1));
}

loadTensionStationAttributes(){
    populateRadioGroup("Tension_station/Details/Tension_pit_top_rail", makeVocab("Tension pit top rail"));
    populateRadioGroup("Tension_station/Details/Tension_pit_top_rail_hanger", makeVocab("Tension pit top rail hanger"));
    populateRadioGroup("Tension_station/Chain_rollers/Chain_roller_1_exists", makeVocab("Chain roller 1 exists"));
    populateRadioGroup("Tension_station/Chain_rollers/Chain_roller_1_shaft", makeVocab("Chain roller 1 shaft"));
    populateDropDown("Tension_station/Chain_rollers/Chain_roller_1_bearings", makeVocab("Chain roller 1 bearings"));
    populateRadioGroup("Tension_station/Chain_rollers/Chain_roller_2_exists", makeVocab("Chain roller 2 exists"));
    populateRadioGroup("Tension_station/Chain_rollers/Chain_roller_2_shaft", makeVocab("Chain roller 2 shaft"));
    populateDropDown("Tension_station/Chain_rollers/Chain_roller_2_bearings", makeVocab("Chain roller 2 bearings"));
    populateRadioGroup("Tension_station/Chain_rollers/Chain_roller_3_exists", makeVocab("Chain roller 3 exists"));
    populateRadioGroup("Tension_station/Chain_rollers/Chain_roller_3_shaft", makeVocab("Chain roller 3 shaft"));
    populateDropDown("Tension_station/Chain_rollers/Chain_roller_3_bearings", makeVocab("Chain roller 3 bearings"));
    populateRadioGroup("Tension_station/Chain_rollers/Chain_roller_4_exists", makeVocab("Chain roller 4 exists"));
    populateRadioGroup("Tension_station/Chain_rollers/Chain_roller_4_shaft", makeVocab("Chain roller 4 shaft"));
    populateDropDown("Tension_station/Chain_rollers/Chain_roller_4_bearings", makeVocab("Chain roller 4 bearings"));
    populateRadioGroup("Tension_station/Cradle/Cradle_1_exists", makeVocab("Cradle 1 exists"));
    populateRadioGroup("Tension_station/Cradle/Cradle_1_counterweight_material", makeVocab("Cradle 1 counterweight material"));
    populateRadioGroup("Tension_station/Cradle/Cradle_2_exists", makeVocab("Cradle 2 exists"));
    populateRadioGroup("Tension_station/Cradle/Cradle_2_counterweight_material", makeVocab("Cradle 2 counterweight material"));
    populateRadioGroup("Tension_station/Cradle/Cradle_3_exists", makeVocab("Cradle 3 exists"));
    populateRadioGroup("Tension_station/Cradle/Cradle_3_counterweight_material", makeVocab("Cradle 3 counterweight material"));
    populateRadioGroup("Tension_station/Cradle/Cradle_4_exists", makeVocab("Cradle 4 exists"));
    populateRadioGroup("Tension_station/Cradle/Cradle_4_counterweight_material", makeVocab("Cradle 4 counterweight material"));
}

saveTensionStation(String callback) {
    if (isNull(getFieldValue("Tension_station/Details/Pit_length")) 
        || isNull(getFieldValue("Tension_station/Details/Pit_width")) 
        || isNull(getFieldValue("Tension_station/Details/Pit_depth"))) {
        showWarning("Validation Error", "Cannot save Tension Station without Pit dimensions");
        return;
    }
    if (!isNull(tension_station_id)) {
        entity = fetchArchEnt(tension_station_id);
    }
    saveTabGroup("Tension_station", tension_station_id, null, null, "tension_station_id = getLastSavedRecordId();" + callback);
}


deleteTensionStation(){
    if (!isNull(tension_station_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this TensionStation Record!", "reallyDeleteTensionStation()", "doNotDelete()");
    } else {
        cancelTabGroup("Tension_station", true);
    }
}

reallyDeleteTensionStation() {
    deleteArchEnt(tension_station_id);
    cancelTabGroup("Tension_station", false);
}

loadTensionStationBoltRelated() {
    Object tensionBolts = new ArrayList();
    if (!isNull(tension_station_id)){
        tensionBolts = fetchAll("select uuid, group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' | ') as response, valuetimestamp\n"+
            "  FROM (  SELECT uuid, attributeid, vocabid, attributename, vocabname, measure, freetext, certainty, attributetype, valuetimestamp, aenttypename\n"+
            "            FROM latestNonDeletedArchentIdentifiers\n"+
            "           WHERE aenttypename = 'Tension station bolts'\n"+
            "             AND uuid in (select uuid\n"+
            "                            FROM latestNonDeletedAentReln\n"+
            "                           where relationshipid in (select relationshipid\n"+
            "                                                      FROM latestNonDeletedAentReln\n"+
            "                                                      JOIN relationship using (relationshipid)\n"+
            "                                                      JOIN relntype using (relntypeid)\n"+
            "                                                     where uuid = "+tension_station_id+"\n"+
            "                                                       and relntypeName = 'TensionTensionBolt')\n"+
            "                             and uuid != "+tension_station_id+")\n"+
            "        ORDER BY uuid, attributename ASC)\n"+
            "group by uuid\n"+
            "order by valuetimestamp desc, uuid, attributename;");
    }
    populateList("Tension_station/Tension_bolts/List_tension_bolt",  tensionBolts);
}

loadTensionStationPhotoLogRelated() {
    feature_id = tension_station_id;
    loadRelatedPhotologs("Tension_station/PhotoLog/ListPhotoLog");
}

/** ARCHENT: Tension Station Bolt **/
onEvent("Tension_bolts/Details/Update", "delayclick", "saveTensionStationBolt(\"\")");
onEvent("Tension_bolts/Details/Duplicate", "delayclick", "saveTensionStationBolt(\"tension_station_bolt_id = null;\")");
onEvent("Tension_bolts/Details/New", "delayclick", "saveTensionStationBolt(\"newTensionStationBolt();\")");
onEvent("Tension_bolts/Details/Close", "delayclick", "saveTensionStationBolt(\"cancelTabGroup(\\\"Tension_bolts\\\", false);showTab(\\\"Tension_station/Tension_bolts\\\");\")");
onEvent("Tension_bolts/Details/Delete", "delayclick", "deleteTensionStationBolt()");

String tension_station_bolt_id;

newTensionStationBolt(){
    tension_station_bolt_id = null;
    newTabGroup("Tension_bolts");
    date = fetchOne("select date('now', 'localtime');");
    setFieldValue("Tension_bolts/Details/Creation_Date", date.get(0));
    setFieldValue("Tension_bolts/Details/Created_By", username);
}

loadTensionStationBolt() {
    archent_id = getListItemValue();
    loadTensionStationBoltFrom(archent_id);
}

loadTensionStationBoltFrom(archent_id) {
    tension_station_bolt_id = archent_id;
    if (isNull(tension_station_bolt_id)) {
        showToast("No record selected");
        return;
    }
    
    showTabGroup("Tension_bolts", tension_station_bolt_id);
    Object foo = fetchOne("select fname || ' ' || lname from user join archentity using (userid) where uuid = '"+tension_station_bolt_id+"' group by uuid having min(aenttimestamp)");
    setFieldValue("Tension_bolts/Details/Created_By", foo.get(0));
    Object bar = fetchOne("select uuid, datetime(aentTimestamp, 'localtime')  from archentity where uuid = '"+tension_station_bolt_id+"' group by uuid having min(aenttimestamp);");
    setFieldValue("Tension_bolts/Details/Creation_Date", bar.get(1));
}

loadTensionStationBoltAttributes(){
    populateRadioGroup("Tension_bolts/Details/Tension_station_bolt_type", makeVocab("Tension station bolt type"));
    populateRadioGroup("Tension_bolts/Details/Head", makeVocab("Head"));
    populateRadioGroup("Tension_bolts/Details/Nut", makeVocab("Nut"));
    populateRadioGroup("Tension_bolts/Details/Washer", makeVocab("Washer"));
}

saveTensionStationBolt(String callback) {
    if (isNull(getFieldValue("Tension_bolts/Details/Length")) || isNull(getFieldValue("Tension_bolts/Details/Diameter"))) {
        showWarning("Validation Error", "Cannot save Tension bolt without Length or Diameter");
        return;
    }
    if (!isNull(tension_station_bolt_id)) {
        entity = fetchArchEnt(tension_station_bolt_id);
    }
    saveTabGroup("Tension_bolts", tension_station_bolt_id, null, null, "tension_station_bolt_id = getLastSavedRecordId();saveEntitiesToRel(\"TensionTensionBolt\", tension_station_id, tension_station_bolt_id);" + callback);
}

deleteTensionStationBolt(){
    if (!isNull(tension_station_bolt_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Tension Station Bolt Record!", "reallyDeleteTensionStationBolt()", "doNotDelete()");
    } else {
        cancelTabGroup("Tension_bolts", true);
    }
}

reallyDeleteTensionStationBolt(){
    deleteArchEnt(tension_station_bolt_id);
    cancelTabGroup("Tension_bolts", false);
}

/** ARCHENT: Track Rope **/
onEvent("Track_rope/PhotoLog", "show", "loadTrackRopeRelated()");

onEvent("Track_rope/Details/Update", "delayclick", "saveTrackRope(\"\")");
onEvent("Track_rope/Details/Duplicate", "delayclick", "saveTrackRope(\"track_rope_id=null;autoNumTrackRope();\")");
onEvent("Track_rope/Details/New", "delayclick", "saveTrackRope(\"newTrackRope();\")");
onEvent("Track_rope/Details/Close", "delayclick", "saveTrackRope(\"cancelTabGroup(\\\"Track_rope\\\", false);\")");
onEvent("Track_rope/Details/Delete", "delayclick", "deleteTrackRope()");

onEvent("Track_rope/Details/CalculateGPS", "delayclick", "fillInGPS(\"Track_rope/Details/\")");
onEvent("Track_rope/Details/Attach_photos", "delayclick", "attachPictureTo(\"Track_rope/Details/Photos\")");

onEvent("Track_rope/PhotoLog/newPhotoLog", "delayclick", "saveTrackRope(\"feature_id = track_rope_id; feature_type=\\\"Track_rope\\\"; newPhotolog();\")");
onEvent("Track_rope/PhotoLog/ListPhotoLog", "click", "feature_id = track_rope_id; loadPhotolog();");

String track_rope_id;

newTrackRope(){
    track_rope_id = null;
    newTabGroup("Track_rope");
    autoNumTrackRope();
    date = fetchOne("select date('now', 'localtime');");
    setFieldValue("Track_rope/Details/Creation_Date", date.get(0));
    setFieldValue("Track_rope/Details/Created_By", username);
}

autoNumTrackRope() {
    setFieldValue("Track_rope/Details/Measurement_number", getCounter("Track rope"));
}

loadTrackRopeFrom(archent_id) {
    track_rope_id = archent_id;
    if (isNull(track_rope_id)) {
        showToast("No record selected");
        return;
    }
    
    showTabGroup("Track_rope", track_rope_id);
    Object foo = fetchOne("select fname || ' ' || lname from user join archentity using (userid) where uuid = '"+track_rope_id+"' group by uuid having min(aenttimestamp)");
    setFieldValue("Track_rope/Details/Created_By", foo.get(0));
    Object bar = fetchOne("select uuid, datetime(aentTimestamp, 'localtime')  from archentity where uuid = '"+track_rope_id+"' group by uuid having min(aenttimestamp);");
    setFieldValue("Track_rope/Details/Creation_Date", bar.get(1));
}


loadTrackRopeAttributes(){
    populateDropDown("Track_rope/Details/Wear_from_carrier_wheels_on_top", makeVocab("Wear from carrier wheels on top"));
    populateDropDown("Track_rope/Details/Wear_from_saddle_pressure_underneath", makeVocab("Wear from saddle pressure underneath"));
    populateDropDown("Track_rope/Details/Rope_end_condition", makeVocab("Rope end condition"));
}

saveTrackRope(String callback) {
    if (isNull(getFieldValue("Track_rope/Details/Measurement_number"))) {
        showWarning("Validation Error", "Cannot save Track Rope without Measurement Number");
        return;
    }
    if (!isNull(track_rope_id)) {
        entity = fetchArchEnt(track_rope_id);
    }
    saveTabGroup("Track_rope", track_rope_id, null, null, "track_rope_id = getLastSavedRecordId();" + callback);
}


deleteTrackRope() {
    if (!isNull(track_rope_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Track Rope Record!", "reallyDeleteTrackRope()", "doNotDelete()");
    } else {
        cancelTabGroup("Track_rope", true);
    }
}

reallyDeleteTrackRope() {
    deleteArchEnt(track_rope_id);
    cancelTabGroup("Track_rope", false);
}

loadTrackRopeRelated() {
    feature_id = track_rope_id;
    loadRelatedPhotologs("Track_rope/PhotoLog/ListPhotoLog");
}

/** ARCHENT: Haul Rope Remnant **/
onEvent("Haul_rope_remnant/PhotoLog", "show", "loadHaulRopeRelated()");

onEvent("Haul_rope_remnant/Details/Update", "delayclick", "saveHaulRope(\"\")");
onEvent("Haul_rope_remnant/Details/Duplicate", "delayclick", "saveHaulRope(\"haul_rope_id=null;autoNumHaulRope();\")");
onEvent("Haul_rope_remnant/Details/New", "delayclick", "saveHaulRope(\"newHaulRope();\")");
onEvent("Haul_rope_remnant/Details/Close", "delayclick", "saveHaulRope(\"cancelTabGroup(\\\"Haul_rope_remnant\\\", false);\")");
onEvent("Haul_rope_remnant/Details/Delete", "delayclick", "deleteHaulRope()");

onEvent("Haul_rope_remnant/Details/CalculateGPS", "delayclick", "fillInGPS(\"Haul_rope_remnant/Details/\")");
onEvent("Haul_rope_remnant/Details/Attach_photos", "delayclick", "attachPictureTo(\"Haul_rope_remnant/Details/Photos\")");

onEvent("Haul_rope_remnant/PhotoLog/newPhotoLog", "delayclick", "saveHaulRope(\"feature_id = haul_rope_id; feature_type=\\\"Haul_rope_remnant\\\";newPhotolog();\")");
onEvent("Haul_rope_remnant/PhotoLog/ListPhotoLog", "click", "feature_id = haul_rope_id; loadPhotolog();");

String haul_rope_id;

newHaulRope(){
    haul_rope_id = null;
    newTabGroup("Haul_rope_remnant");
    date = fetchOne("select date('now', 'localtime');");
    setFieldValue("Haul_rope_remnant/Details/Creation_Date", date.get(0));
    setFieldValue("Haul_rope_remnant/Details/Created_By", username);
}

loadHaulRopeFrom(archent_id) {
    haul_rope_id = archent_id;
    if (isNull(haul_rope_id)) {
        showToast("No record selected");
        return;
    }
    
    showTabGroup("Haul_rope_remnant", haul_rope_id);
    Object foo = fetchOne("select fname || ' ' || lname from user join archentity using (userid) where uuid = '"+haul_rope_id+"' group by uuid having min(aenttimestamp)");
    setFieldValue("Haul_rope_remnant/Details/Created_By", foo.get(0));
    Object bar = fetchOne("select uuid, datetime(aentTimestamp, 'localtime')  from archentity where uuid = '"+haul_rope_id+"' group by uuid having min(aenttimestamp);");
    setFieldValue("Haul_rope_remnant/Details/Creation_Date", bar.get(1));
}

loadHaulRopeAttributes(){
    populateRadioGroup("Haul_rope_remnant/Details/Direction", makeVocab("Direction"));
    populateDropDown("Haul_rope_remnant/Details/Haul_rope_type", makeVocab("Haul rope type"));
    populateDropDown("Haul_rope_remnant/Details/Rope_end_condition", makeVocab("Rope end condition"));
}

saveHaulRope(String callback) {
    if (!isNull(haul_rope_id)) {
        entity = fetchArchEnt(haul_rope_id);
    }
    saveTabGroup("Haul_rope_remnant", haul_rope_id, null, null, "haul_rope_id = getLastSavedRecordId();" + callback);
}


deleteHaulRope() {
    if (!isNull(haul_rope_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Haul Rope Record!", "reallyDeleteHaulRope()", "doNotDelete()");
    } else {
        cancelTabGroup("Haul_rope_remnant", true);
    }
}

reallyDeleteHaulRope() {
    deleteArchEnt(haul_rope_id);
    cancelTabGroup("Haul_rope_remnant", false);
}

loadHaulRopeRelated() {
    feature_id = haul_rope_id;
    loadRelatedPhotologs("Haul_rope_remnant/PhotoLog/ListPhotoLog");
}


/** ARCHENT: Rope Joiner **/
onEvent("Rope_joiner/PhotoLog", "show", "loadRopeJoinerRelated()");

onEvent("Rope_joiner/Details/Update", "delayclick", "saveRopeJoiner(\"\")");
onEvent("Rope_joiner/Details/Duplicate", "delayclick", "saveRopeJoiner(\"rope_joiner_id=null;\")");
onEvent("Rope_joiner/Details/New", "delayclick", "saveRopeJoiner(\"newRopeJoiner();\")");
onEvent("Rope_joiner/Details/Close", "delayclick", "saveRopeJoiner(\"cancelTabGroup(\\\"Rope_joiner\\\", false);\")");
onEvent("Rope_joiner/Details/Delete", "delayclick", "deleteRopeJoiner()");

onEvent("Rope_joiner/Details/CalculateGPS", "delayclick", "fillInGPS(\"Rope_joiner/Details/\")");
onEvent("Rope_joiner/Details/Attach_photos", "delayclick", "attachPictureTo(\"Rope_joiner/Details/Photos\")");

onEvent("Rope_joiner/PhotoLog/newPhotoLog", "delayclick", "saveRopeJoiner(\"feature_id = rope_joiner_id; feature_type=\\\"Rope_joiner\\\";newPhotolog();\")");
onEvent("Rope_joiner/PhotoLog/ListPhotoLog", "click", "feature_id = rope_joiner_id; loadPhotolog();");

String rope_joiner_id;

newRopeJoiner(){
    rope_joiner_id = null;
    newTabGroup("Rope_joiner");
    date = fetchOne("select date('now', 'localtime');");
    setFieldValue("Rope_joiner/Details/Creation_Date", date.get(0));
    setFieldValue("Rope_joiner/Details/Created_By", username);
}

loadRopeJoinerFrom(archent_id) {
    rope_joiner_id = archent_id;
    if (isNull(rope_joiner_id)) {
        showToast("No record selected");
        return;
    }
    
    showTabGroup("Rope_joiner", rope_joiner_id);
    Object foo = fetchOne("select fname || ' ' || lname from user join archentity using (userid) where uuid = '"+rope_joiner_id+"' group by uuid having min(aenttimestamp)");
    setFieldValue("Rope_joiner/Details/Created_By", foo.get(0));
    Object bar = fetchOne("select uuid, datetime(aentTimestamp, 'localtime')  from archentity where uuid = '"+rope_joiner_id+"' group by uuid having min(aenttimestamp);");
    setFieldValue("Rope_joiner/Details/Creation_Date", bar.get(1));
}

loadRopeJoinerAttributes(){
    populateDropDown("Rope_joiner/Details/Rope_joiner_type", makeVocab("Rope joiner type"));
}

saveRopeJoiner(String callback) {
    if (isNull(getFieldValue("Rope_joiner/Details/Rope_joiner_type"))) {
        showWarning("Validation Error", "Cannot save record without Rope Joiner Type");
        return;
    }
    if (!isNull(rope_joiner_id)) {
        entity = fetchArchEnt(rope_joiner_id);
    }
    saveTabGroup("Rope_joiner", rope_joiner_id, null, null, "rope_joiner_id = getLastSavedRecordId();" + callback);
}


deleteRopeJoiner() {
    if (!isNull(rope_joiner_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Rope Joiner Record!", "reallyDeleteRopeJoiner()", "doNotDelete()");
    } else {
        cancelTabGroup("Rope_joiner", true);
    }
}

reallyDeleteRopeJoiner() {
    deleteArchEnt(rope_joiner_id);
    cancelTabGroup("Rope_joiner", false);
}

loadRopeJoinerRelated() {
    feature_id = rope_joiner_id;
    loadRelatedPhotologs("Rope_joiner/PhotoLog/ListPhotoLog");
}

/** ARCHENT: Rope Groove **/
onEvent("Rope_groove/PhotoLog", "show", "loadRopeGrooveRelated()");

onEvent("Rope_groove/Details/Update", "delayclick", "saveRopeGroove(\"\")");
onEvent("Rope_groove/Details/Duplicate", "delayclick", "saveRopeGroove(\"rope_groove_id=null;\")");
onEvent("Rope_groove/Details/New", "delayclick", "saveRopeGroove(\"newRopeGroove();\")");
onEvent("Rope_groove/Details/Close", "delayclick", "saveRopeGroove(\"cancelTabGroup(\\\"Rope_groove\\\", false);\")");
onEvent("Rope_groove/Details/Delete", "delayclick", "deleteRopeGroove()");

onEvent("Rope_groove/Details/CalculateGPS", "delayclick", "fillInGPS(\"Rope_groove/Details/\")");
onEvent("Rope_groove/Details/Attach_photos", "delayclick", "attachPictureTo(\"Rope_groove/Details/Photos\")");

onEvent("Rope_groove/PhotoLog/newPhotoLog", "delayclick", "saveRopeGroove(\"feature_id = rope_groove_id; feature_type=\\\"Rope_groove\\\";ewPhotolog();\")");
onEvent("Rope_groove/PhotoLog/ListPhotoLog", "click", "feature_id = rope_groove_id; loadPhotolog();");

String rope_groove_id;

newRopeGroove(){
    rope_groove_id = null;
    newTabGroup("Rope_groove");
    date = fetchOne("select date('now', 'localtime');");
    setFieldValue("Rope_groove/Details/Creation_Date", date.get(0));
    setFieldValue("Rope_groove/Details/Created_By", username);
}

loadRopeGrooveFrom(archent_id) {
    rope_groove_id = archent_id;
    if (isNull(rope_groove_id)) {
        showToast("No record selected");
        return;
    }
    
    showTabGroup("Rope_groove", rope_groove_id);
    Object foo = fetchOne("select fname || ' ' || lname from user join archentity using (userid) where uuid = '"+rope_groove_id+"' group by uuid having min(aenttimestamp)");
    setFieldValue("Rope_groove/Details/Created_By", foo.get(0));
    Object bar = fetchOne("select uuid, datetime(aentTimestamp, 'localtime')  from archentity where uuid = '"+rope_groove_id+"' group by uuid having min(aenttimestamp);");
    setFieldValue("Rope_groove/Details/Creation_Date", bar.get(1));
}


saveRopeGroove(String callback) {
    if (isNull(getFieldValue("Rope_groove/Details/Width")) || 
        isNull(getFieldValue("Rope_groove/Details/Depth"))) {
        showWarning("Validation Error", "Cannot save Rope Groove without Width and Depth");
        return;
    }
    if (!isNull(rope_groove_id)) {
        entity = fetchArchEnt(rope_groove_id);
    }
    saveTabGroup("Rope_groove", rope_groove_id, null, null, "rope_groove_id = getLastSavedRecordId();" + callback);
}


deleteRopeGroove(){
    if (!isNull(rope_groove_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Rope Groove Record!", "reallyDeleteRopeGroove()", "doNotDelete()");
    } else {
        cancelTabGroup("Rope_groove", true);
    }
}

reallyDeleteRopeGroove(){
    deleteArchEnt(rope_groove_id);
    cancelTabGroup("Rope_groove", false);
}

loadRopeGrooveRelated() {
    feature_id = rope_groove_id;
    loadRelatedPhotologs("Rope_groove/PhotoLog/ListPhotoLog");
}

/** ARCHENT: Other **/
onEvent("Other/PhotoLog", "show", "loadOtherRelated()");

onEvent("Other/Details/Update", "delayclick", "saveOther(\"\")");
onEvent("Other/Details/Duplicate", "delayclick", "saveOther(\"other_id=null;\")");
onEvent("Other/Details/New", "delayclick", "saveOther(\"newOther();\")");
onEvent("Other/Details/Close", "delayclick", "saveOther(\"cancelTabGroup(\\\"Other\\\", false);\")");
onEvent("Other/Details/Delete", "delayclick", "deleteOther()");

onEvent("Other/Details/CalculateGPS", "delayclick", "fillInGPS(\"Other/Details/\")");
onEvent("Other/Details/Attach_photos", "delayclick", "attachPictureTo(\"Other/Details/Photos\")");

onEvent("Other/PhotoLog/newPhotoLog", "delayclick", "saveRopeGroove(\"feature_id = other_id; feature_type=\\\"Other\\\";newPhotolog();\")");
onEvent("Other/PhotoLog/ListPhotoLog", "click", "feature_id = other_id; loadPhotolog();");

String other_id;

newOther(){
    other_id = null;
    newTabGroup("Other");
    date = fetchOne("select date('now', 'localtime');");
    setFieldValue("Other/Details/Creation_Date", date.get(0));
    setFieldValue("Other/Details/Created_By", username);
}

loadOtherFrom(archent_id) {
    other_id = archent_id;
    if (isNull(other_id)) {
        showToast("No record selected");
        return;
    }
    
    showTabGroup("Other", other_id);
    Object foo = fetchOne("select fname || ' ' || lname from user join archentity using (userid) where uuid = '"+other_id+"' group by uuid having min(aenttimestamp)");
    setFieldValue("Other/Details/Created_By", foo.get(0));
    Object bar = fetchOne("select uuid, datetime(aentTimestamp, 'localtime')  from archentity where uuid = '"+other_id+"' group by uuid having min(aenttimestamp);");
    setFieldValue("Other/Details/Creation_Date", bar.get(1));
}

loadOtherAttributes(){
    populateDropDown("Other/Details/Other_type", makeVocab("Other type"));
}

saveOther(String callback) {
    if (!isNull(other_id)) {
        entity = fetchArchEnt(other_id);
    }
    saveTabGroup("Other", other_id, null, null, "other_id = getLastSavedRecordId();" + callback);
}

deleteOther(){
    if (!isNull(other_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Other Record!", "reallyDeleteOther()", "doNotDelete()");
    } else {
        cancelTabGroup("Other", true);
    }
}

reallyDeleteOther(){
    deleteArchEnt(other_id);
    cancelTabGroup("Other", false);
}

loadOtherRelated() {
    feature_id = other_id;
    loadRelatedPhotologs("Other/PhotoLog/ListPhotoLog");
}

/*** Arch Ent: PhotoLog ***/
onEvent("Photograph_log/Photograph_log/Update", "delayclick", "savePhotolog(\"\")");
onEvent("Photograph_log/Photograph_log/Duplicate", "delayclick", "savePhotolog(\"photolog_id=null;\")");
onEvent("Photograph_log/Photograph_log/New", "delayclick", "savePhotolog(\"newPhotolog();\")");
onEvent("Photograph_log/Photograph_log/Close", "delayclick", "savePhotolog(\"closePhotoLog();\")");
onEvent("Photograph_log/Photograph_log/Delete", "delayclick", "deletePhotolog()");

String photolog_id;

newPhotolog(){
    photolog_id = null;
    newTabGroup("Photograph_log");
    date = fetchOne("select date('now', 'localtime');");
    setFieldValue("Photograph_log/Photograph_log/Creation_Date", date.get(0));
    setFieldValue("Photograph_log/Photograph_log/Created_By", username);
    //setFieldValue("Photograph_log/Photograph_log/Photograph_reference_ID", getCounter("Photograph log"));
}

loadPhotolog() {
    archent_id = getListItemValue();
    loadPhotologFrom(archent_id);
}

loadPhotologFrom(archent_id) {
    photolog_id = archent_id;
    if (isNull(photolog_id)) {
        showToast("No record selected");
        return;
    }
    
    showTabGroup("Photograph_log", photolog_id);
    Object foo = fetchOne("select fname || ' ' || lname from user join archentity using (userid) where uuid = '"+photolog_id+"' group by uuid having min(aenttimestamp)");
    setFieldValue("Photograph_log/Photograph_log/Created_By", foo.get(0));
    Object bar = fetchOne("select uuid, datetime(aentTimestamp, 'localtime')  from archentity where uuid = '"+photolog_id+"' group by uuid having min(aenttimestamp);");
    setFieldValue("Photograph_log/Photograph_log/Creation_Date", bar.get(1));
}

loadPhotologAttributes(){
   
}

savePhotolog(String callback) {
    if (isNull(getFieldValue("Photograph_log/Photograph_log/Photograph_reference_ID"))) {
        showWarning("Validation Error", "Cannot save Photo log without Photograph Reference ID");
        return;
    }
    if (!isNull(photolog_id)) {
        entity = fetchArchEnt(photolog_id);
    }
    if(!isNull(feature_id)) {
        saveTabGroup("Photograph_log", photolog_id, null, null, "photolog_id = getLastSavedRecordId();saveEntitiesToRel(\"FeaturePhotographLog\", feature_id, photolog_id);" + callback);    
    } else {
        saveTabGroup("Photograph_log", photolog_id, null, null, "photolog_id = getLastSavedRecordId();" + callback);
    }
    
}

closePhotoLog() {
    cancelTabGroup("Photograph_log", false);
    showTab(feature_type + "/PhotoLog");
}

deletePhotolog(){
    if (!isNull(photolog_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Photolog Record!", "reallyDeletePhotolog()", "doNotDelete()");
    } else {
        cancelTabGroup("Photograph_log", true);
    }
}

reallyDeletePhotolog(){
    deleteArchEnt(photolog_id);
    cancelTabGroup("Photograph_log", false);
}

loadRelatedPhotologs(String path){
    Object photologs = new ArrayList();
    if (!isNull(feature_id)){
        photologs = fetchAll("select uuid, group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' | ') as response, valuetimestamp\n"+
            "  FROM (  SELECT uuid, attributeid, vocabid, attributename, vocabname, measure, freetext, certainty, attributetype, valuetimestamp, aenttypename\n"+
            "            FROM latestNonDeletedArchentIdentifiers\n"+
            "           WHERE aenttypename = 'Photograph log'\n"+
            "             AND uuid in (select uuid\n"+
            "                            FROM latestNonDeletedAentReln\n"+
            "                           where relationshipid in (select relationshipid\n"+
            "                                                      FROM latestNonDeletedAentReln\n"+
            "                                                      JOIN relationship using (relationshipid)\n"+
            "                                                      JOIN relntype using (relntypeid)\n"+
            "                                                     where uuid = "+feature_id+"\n"+
            "                                                       and relntypeName = 'FeaturePhotographLog')\n"+
            "                             and uuid != "+feature_id+")\n"+
            "        ORDER BY uuid, attributename ASC)\n"+
            "group by uuid\n"+
            "order by valuetimestamp desc, uuid, attributename;");
    }
    populateList(path,  photologs);
}

// MISC FUNCTIONS    

saveEntitiesToRel(type, entity1, entity2) {
    if (isNull(entity1) || isNull(entity2)) return;
    rel_id = saveRel(null, type, null, null);
    addReln(entity1, rel_id, null);
    addReln(entity2, rel_id, null);
}

makeVocab(String attrib){
    Object a = fetchAll("select vocabid, vocabname from vocabulary join attributekey using (attributeid) where attributename = '"+attrib+"' order by vocabname;");
    return a;
}

makePictureGallery(String attrib){
    fetchAll("select vocabid, vocabname, pictureurl from vocabulary left join attributekey using (attributeid) where attributename = '" + attrib + "' order by vocabname;");
}

fillInGPS(String path){
    Object position = getGPSPositionProjected();
    Object projPosition = getGPSPositionProjected();
    if (projPosition != null ){
        Double latitude = projPosition.getLatitude();
        Double longitude = projPosition.getLongitude();
        setFieldValue(path+"Latitude", latitude);
        setFieldValue(path+"Longitude", longitude);
    } else {
        showToast("GPS Not initialized");
    }
}

/*** SYNC ***/
onEvent("control/gps/startsync", "click", "startSync()");
onEvent("control/gps/stopsync", "click", "stopSync()");

setSyncMinInterval(10.0f);
setSyncMaxInterval(20.0f);
setSyncDelay(5.0f);

startSync() {
    setSyncEnabled(true);
    setFileSyncEnabled(true);
}

stopSync() {
    setSyncEnabled(false);
    setFileSyncEnabled(false);
}

/*** Uneditable - you can edit the code below with extreme precaution ***/
/*** USER ***/

getDefaultUsersList() {
    users = fetchAll("select userid, fname || ' ' || lname from user");
    return users;
}

populateListForUsers(){
    populateList("user/usertab/users", getDefaultUsersList());
}

populateListForUsers();

String username = "";
String device = "";

login(){
    Object userResult = fetchOne("select userid,fname,lname,email from user where userid='" + getListItemValue() + "';");
    User user = new User(userResult.get(0),userResult.get(1),userResult.get(2),userResult.get(3));
    userid = userResult.get(0);
    setUser(user);
    username = userResult.get(1) + " " + userResult.get(2);
    showTabGroup("control");
}

doNotDelete(){
    showToast("Delete Cancelled.");
}

onEvent("user/usertab/users", "click", "login()");

loadBucketAttributes();
loadTowerAttributes();
loadTowerPoleAttributes();
loadTrackCrossbarAttributes();
loadWheelFrameAttributes();
loadTowerBoltAttributes();
loadTensionStationAttributes();
loadTensionStationBoltAttributes();
loadTrackRopeAttributes();
loadHaulRopeAttributes();
loadRopeJoinerAttributes();
loadOtherAttributes();
loadPhotologAttributes();



/*


    Object foo = fetchOne("select fname || ' ' || lname from user join archentity using (userid) where uuid = '"+context_group_id+"' group by uuid having min(aenttimestamp)");
    setFieldValue("ContextGroup/ContextGroup_Details/Created_By", foo.get(0));
    Object bar = fetchOne("select uuid, datetime(aentTimestamp, 'localtime')  from archentity where uuid = '"+context_group_id+"' group by uuid having min(aenttimestamp);");
    setFieldValue("ContextGroup/ContextGroup_Details/Creation_Date", bar.get(1));

    */